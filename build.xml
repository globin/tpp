<?xml version="1.0" encoding="UTF-8"?>

<project name="tpp" default="build">
 <target name="build"
   depends="prepare,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpdoc2,phpunit,karma,phpcb"/>

 <target name="build-parallel"
   depends="prepare,lint,tools-parallel,phpunit,phpcb"/>

 <target name="tools-parallel" description="Run tools in parallel">
  <parallel threadCount="2">
   <sequential>
    <antcall target="pdepend"/>
    <antcall target="phpmd-ci"/>
   </sequential>
   <antcall target="phpcpd"/>
   <antcall target="phpcs-ci"/>
   <antcall target="phploc"/>
   <antcall target="phpdoc2"/>
  </parallel>
 </target>

 <target name="clean" description="Cleanup build artifacts">
  <delete dir="${basedir}/build/api"/>
  <delete dir="${basedir}/build/code-browser"/>
  <delete dir="${basedir}/build/coverage"/>
  <delete dir="${basedir}/build/logs"/>
  <delete dir="${basedir}/build/pdepend"/>
  <antcall target="symfony.clean" />
 </target>
 <target name="symfony.clean"
         description="Cleans up symfony data">
<!--
  <delete file="${basedir}/composer.phar" />
  <delete file="${basedir}/app/config/parameters.yml" />
 -->
  <delete dir="${basedir}/api/app/cache" />
 </target>
 <target name="prepare" depends="clean" description="Prepare for build">
  <mkdir dir="${basedir}/build/api"/>
  <mkdir dir="${basedir}/build/code-browser"/>
  <mkdir dir="${basedir}/build/coverage"/>
  <mkdir dir="${basedir}/build/logs"/>
  <mkdir dir="${basedir}/build/pdepend"/>
  <antcall target="symfony.prepare" />
 </target>
 <target name="symfony.prepare">
  <mkdir dir="${basedir}/api/app/cache" />
  <mkdir dir="${basedir}/api/web/uploads" />
  <!-- <copy file="${basedir}/app/config/parameters.yml.dist" tofile="${basedir}/app/config/parameters.yml" /> -->
  <exec executable="bash">
   <arg value="-c" />
   <arg value="curl -s http://getcomposer.org/installer | php" />
  </exec>
  <exec executable="php">
   <arg value="composer.phar" />
   <arg value="--working-dir=api" />
   <arg value="install" />
  </exec>
  <exec executable="api/app/console">
   <arg value="doctrine:database:drop" />
   <arg value="-n" />
   <arg value="--env=test" />
   <arg value="--force" />
  </exec>
  <exec executable="api/app/console">
   <arg value="doctrine:database:create" />
   <arg value="--env=test" />
   <arg value="-n" />
  </exec>
  <exec executable="api/app/console">
   <arg value="doctrine:schema:update" />
   <arg value="-n" />
   <arg value="--env=test" />
   <arg value="--complete" />
   <arg value="--force" />
  </exec>
  <exec executable="api/app/console">
   <arg value="assetic:dump" />
   <arg value="-n" />
   <arg value="--env=prod" />
   <arg value="--no-debug" />
  </exec>
  <exec executable="api/app/console">
   <arg value="assets:install" />
   <arg value="-n" />
   <arg value="--env=test" />
   <arg value="--no-debug" />
   <arg value="api/web" />
  </exec>
 </target>
 <target name="lint" description="Perform syntax check of sourcecode files">
  <apply executable="php" failonerror="true">
   <arg value="-l" />

   <fileset dir="${basedir}/api/app">
    <include name="**/*.php" />
    <exclude name="**/cache/**" />
    <modified />
   </fileset>

   <fileset dir="${basedir}/api/src">
    <include name="**/*.php" />
    <modified />
   </fileset>

   <fileset dir="${basedir}/api/web">
    <include name="**/*.php" />
    <modified />
   </fileset>
  </apply>
  <apply executable="api/app/console" failonerror="true">
   <arg value="twig:lint" />
   <arg value="--env=test" />

   <fileset dir="${basedir}/api/app/Resources">
    <include name="**/*.twig" />
   </fileset>

   <fileset dir="${basedir}/api/src">
    <include name="**/*.twig" />
   </fileset>
  </apply>
 </target>

 <target name="phploc" description="Measure project size using PHPLOC">
  <exec executable="phploc">
   <arg value="--log-csv" />
   <arg value="${basedir}/build/logs/phploc.csv" />
   <arg path="${basedir}/api/src" />
  </exec>
 </target>

 <target name="pdepend" description="Calculate software metrics using PHP_Depend">
  <exec executable="pdepend">
   <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
   <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
   <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
   <arg path="${basedir}/api/src" />
  </exec>
 </target>

 <target name="phpmd"
         description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="phpmd">
   <arg path="${basedir}/api/app/Resources,${basedir}/api/src" />
   <arg value="text" />
   <arg value="${basedir}/api/phpmd.xml" />
  </exec>
 </target>

 <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
  <exec executable="phpmd">
   <arg path="${basedir}/api/app/Resources,${basedir}/api/src" />
   <arg value="xml" />
   <arg value="${basedir}/phpmd.xml" />
   <arg value="--reportfile" />
   <arg value="${basedir}/build/logs/pmd.xml" />
  </exec>
 </target>

 <target name="phpcs"
         description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="phpcs">
   <arg value="--standard=${basedir}/phpcs.xml" />
   <arg value="--extensions=php" />
   <arg path="${basedir}/api/src" />
  </exec>
 </target>

 <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
  <exec executable="phpcs" output="/dev/null">
   <arg value="--report=checkstyle" />
   <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
   <arg value="--standard=${basedir}/phpcs.xml" />
   <arg value="--extensions=php" />
   <arg path="${basedir}/api/src" />
  </exec>
 </target>

 <target name="phpcpd" description="Find duplicate code using PHPCPD">
  <exec executable="phpcpd">
   <arg value="--log-pmd" />
   <arg value="${basedir}/build/logs/pmd-cpd.xml" />
   <arg path="${basedir}/api/src" />
  </exec>
 </target>

 <target name="phpdoc2" description="Generate API documentation using phpDox">
  <exec executable="phpdoc">
   <arg value="-q" />
   <arg value="-n" />
   <arg value="--directory=${basedir}/api/src" />
   <arg value="--target=${basedir}/doc" />
  </exec>
 </target>

 <target name="phpunit" description="Run unit tests with PHPUnit">
  <exec executable="phpunit" failonerror="true">
    <arg value="-c" />
    <arg value="api/app" />
  </exec>
 </target>

 <target name="karma" description="Run JS unit tests with Karma">
  <exec executable="npm" failonerror="true">
   <arg value="install"/>
  </exec>
  <exec executable="bower" failonerror="true">
   <arg value="install" />
  </exec>
  <exec executable="grunt" failonerror="true">
   <arg value="test" />
  </exec>
 </target>

 <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
  <exec executable="phpcb">
   <arg value="--log" />
   <arg path="${basedir}/build/logs" />
   <arg value="--source" />
   <arg path="${basedir}/api/src" />
   <arg value="--output" />
   <arg path="${basedir}/build/code-browser" />
  </exec>
 </target>
</project>

